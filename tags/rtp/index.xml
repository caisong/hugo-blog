<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rtp on Caisong's Blog</title><link>https://caisong.github.io/tags/rtp/</link><description>Recent content in Rtp on Caisong's Blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 17 Sep 2018 21:51:27 +0800</lastBuildDate><atom:link href="https://caisong.github.io/tags/rtp/index.xml" rel="self" type="application/rss+xml"/><item><title>rtp协议</title><link>https://caisong.github.io/posts/rtp/</link><pubDate>Mon, 17 Sep 2018 21:51:27 +0800</pubDate><guid>https://caisong.github.io/posts/rtp/</guid><description>&lt;ul>
&lt;li>部分内容转载自：&lt;a href="https://blog.csdn.net/leixiaohua1020/article/details/50535230" title="leixiaohua">雷霄骅CSDN博客&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="固定头部格式">固定头部格式&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-plain" data-lang="plain">&lt;span style="display:flex;">&lt;span>		1 2 3 4
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7 0 1 2 3 4 5 6 7
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		|V=2|P|X| CC |M| PT | sequence number |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		| timestamp |
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		| synchronization source (SSRC) | 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		| contributing source (CSRC) | 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>V：RTP协议的版本号，占2位，当前协议版本号为2&lt;/li>
&lt;li>P：填充标志，占1位，如果P=1，则在该报文的尾部填充一个或多个额外的八位组，它们不是有效载荷的一部分。&lt;/li>
&lt;li>X：扩展标志，占1位，如果X=1，则在RTP报头后跟有一个扩展报头&lt;/li>
&lt;li>CC：CSRC计数器，占4位，指示CSRC 标识符的个数&lt;/li>
&lt;li>M: 标记，占1位，不同的有效载荷有不同的含义，对于视频，标记一帧的结束；对于音频，标记会话的开始。&lt;/li>
&lt;li>PT: 有效荷载类型，占7位，用于说明RTP报文中有效载荷的类型，如GSM音频、JPEG图像等,在流媒体中大部分是用来区分音频流和视频流的，这样便于客户端进行解析。&lt;/li>
&lt;li>序列号：占16位，用于标识发送者所发送的RTP报文的序列号，每发送一个报文，序列号增1。这个字段当下层的承载协议用UDP的时候，网络状况不好的时候可以用来检查丢包。
同时出现网络抖动的情况可以用来对数据进行重新排序，序列号的初始值是随机的，同时音频包和视频包的sequence是分别记数的。&lt;/li>
&lt;li>时戳(Timestamp)：占32位，必须使用90 kHz 时钟频率。时戳反映了该RTP报文的第一个八位组的采样时刻。接收者使用时戳来计算延迟和延迟抖动，并进行同步控制。&lt;/li>
&lt;li>同步信源(SSRC)标识符：占32位，用于标识同步信源。该标识符是随机选择的，参加同一视频会议的两个同步信源不能有相同的SSRC。&lt;/li>
&lt;li>特约信源(CSRC)标识符：每个CSRC标识符占32位，可以有0～15个。每个CSRC标识了包含在该RTP报文有效载荷中的所有特约信源。&lt;/li>
&lt;/ul>
&lt;h2 id="固定头部解析">固定头部解析&lt;/h2>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">_rtp_fixed_header&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/* byte 0 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> csrc_len:&lt;span style="color:#ae81ff">4&lt;/span>; &lt;span style="color:#75715e">/* expect 0 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> extension:&lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#75715e">/* expect 1 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> padding:&lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#75715e">/* expect 0 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> version:&lt;span style="color:#ae81ff">2&lt;/span>; &lt;span style="color:#75715e">/* expect 2 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/* byte 1 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> payload:&lt;span style="color:#ae81ff">7&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> marker:&lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#75715e">/* expect 1 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/* bytes 2, 3 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> seq_no; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/* bytes 4-7 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> timestamp; 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#75715e">/* bytes 8-11 */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span> ssrc; &lt;span style="color:#75715e">/* stream number is used here. */&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>} RTP_FIXED_HEADER;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="补充">补充&lt;/h3>
&lt;ul>
&lt;li>声明后加长度，表明占用的bit, 在协议解析中常用&lt;/li>
&lt;li>如果出现前面字段比后面字段长的情况，需要注意字节对齐的情况。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-cpp" data-lang="cpp">&lt;span style="display:flex;">&lt;span>	&lt;span style="color:#66d9ef">typedef&lt;/span> &lt;span style="color:#66d9ef">struct&lt;/span> &lt;span style="color:#a6e22e">_some_protocol&lt;/span>{
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> field_A;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">char&lt;/span> len;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>		&lt;span style="color:#66d9ef">unsigned&lt;/span> &lt;span style="color:#66d9ef">short&lt;/span> flag_B;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>	}SOME_PROTOCOL ;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>此时&lt;code>sizeof SOME_PROTOOCL&lt;/code>的长度是6，没法直接将字节流转为对应的结构体，需要指定对齐长度&lt;/p></description></item></channel></rss>